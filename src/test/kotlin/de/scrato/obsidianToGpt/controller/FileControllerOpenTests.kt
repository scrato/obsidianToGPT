package de.scrato.obsidianToGpt.controller

import de.scrato.obsidianToGpt.config.properties.PathProperties
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.get
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import java.nio.file.Files
import java.nio.file.Path

class FileControllerOpenTest {

    /**
     * Testfall: Datei existiert im Basisverzeichnis.
     * Es wird geprüft, ob der Endpunkt den korrekten Inhalt der Datei
     * zurückliefert und ob alle HATEOAS-Links (update, delete, move, list) vorhanden sind.
     */
    @Test
    fun `openFile returns file content with HATEOAS links when file exists`(@TempDir tempDir: Path) {
        // Erstelle eine Testdatei im temporären Basisverzeichnis.
        val fileName = "test.txt"
        val fileContent = "Hello, world!"
        val filePath = tempDir.resolve(fileName)
        Files.write(filePath, fileContent.toByteArray())

        // Erstelle die für den Controller notwendige PathConfig.
        val pathProperties = PathProperties(tempDir.toString())
        val controller = FileController(pathProperties)
        val mockMvc: MockMvc = MockMvcBuilders.standaloneSetup(controller).build()

        // Führe GET /files/open aus und prüfe:
        // - HTTP-Status OK (200)
        // - JSON-Antwort enthält die Felder fileName und content mit den erwarteten Werten
        // - HATEOAS-Links für update, delete, move und list sind vorhanden.
        mockMvc.get("/files/open?filename=$fileName")
            .andDo { print() }
            .andExpect {
                status { isOk() }
                content { contentType(MediaType.APPLICATION_JSON) }
                jsonPath("$.fileName") { value(fileName) }
                jsonPath("$.content") { value(fileContent) }
                jsonPath("$.links[?(@.rel=='update')].href") { exists() }
                jsonPath("$.links[?(@.rel=='delete')].href") { exists() }
                jsonPath("$.links[?(@.rel=='move')].href") { exists() }
                jsonPath("$.links[?(@.rel=='list')].href") { exists() }
            }
    }

    /**
     * Testfall: Datei existiert nicht im Basisverzeichnis.
     * Erwartetes Ergebnis: HTTP 404 Not Found.
     */
    @Test
    fun `openFile returns 404 when file does not exist`(@TempDir tempDir: Path) {
        // Erstelle die für den Controller notwendige PathConfig.
        val pathProperties = PathProperties(tempDir.toString())
        val controller = FileController(pathProperties)
        val mockMvc: MockMvc = MockMvcBuilders.standaloneSetup(controller).build()

        // Führe GET /files/open mit einem nicht existierenden Dateinamen aus und erwarte einen 404-Status.
        mockMvc.get("/files/open?filename=nonexistent.txt")
            .andDo { print() }
            .andExpect {
                status { isNotFound() }
            }
    }
}
